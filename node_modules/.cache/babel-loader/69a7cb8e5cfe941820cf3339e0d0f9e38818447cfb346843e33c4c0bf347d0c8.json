{"ast":null,"code":"var _jsxFileName = \"/Users/bhargavparekh/Desktop/WordleClone/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nimport Keyboard from \"./components/Keyboard\";\nimport { boardDefault, scoreBoardDefault, keyScoreValue } from \"./Words\";\nimport React, { useState, createContext, useEffect } from \"react\";\nimport GameOver from \"./components/GameOver\";\nimport Confetti from 'react-confetti';\nimport { useMediaQuery } from 'react-responsive';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(boardDefault);\n  const [Scoreboard, setScoreBoard] = useState(scoreBoardDefault);\n  const [keyScore, setKeyScore] = useState(keyScoreValue);\n  const [confetti, SetConfetti] = useState(false);\n  const [score, setScore] = useState([]);\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letter: 0\n  });\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  const setKeyScoreValue = (score, currentWord) => {\n    const indices = [];\n    const newKeyScorebord = [...keyScore];\n    score.forEach((element, index) => {\n      if (element === 2) {\n        indices.push(currentWord[index] + 2);\n      } else if (element === 1) {\n        indices.push(currentWord[index] + 1);\n      } else {\n        indices.push(currentWord[index] + 0);\n      }\n      console.log(currAttempt.attempt);\n      newKeyScorebord[currAttempt.attempt] = indices;\n      setKeyScore(newKeyScorebord);\n    });\n  };\n  const onEnter = () => {\n    if (currAttempt.letter !== 5) {\n      alert(\"Not enough letters\");\n      return;\n    }\n    let currentWord = \"\";\n    for (let i = 0; i < 5; i++) {\n      currentWord += board[currAttempt.attempt][i];\n    }\n\n    // Call the API\n    fetch('https://wordle-apis.vercel.app/api/validate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        guess: currentWord\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      // Process the API response\n      // calculate total score\n      const totalScore = data.score.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n      //set array of received score to a state var\n      setScore(data.score);\n\n      /* if guessed word is valid, increment user attemp, write to scoreBoard array matrix\n         if not valid, alert the user and do nothing*/\n      if (data.is_valid_word) {\n        setCurrAttempt({\n          attempt: currAttempt.attempt + 1,\n          letter: 0\n        });\n        const newScorebord = [...Scoreboard];\n        newScorebord[currAttempt.attempt] = data.score;\n        setScoreBoard(newScorebord);\n        console.log(Scoreboard);\n        setKeyScoreValue(data.score, currentWord);\n      } else {\n        alert(\"Not a valid word\");\n      }\n\n      /** if user guessed correct word\n       * then it's game over with Confetti on the page\n      */\n      if (totalScore === 10) {\n        setGameOver({\n          gameOver: true,\n          guessedWord: true\n        });\n        SetConfetti(true);\n      }\n      /** if user did not guessed correct word and have used all attempts\n       * it's game over. \n      */\n      if (totalScore !== 10 && currAttempt.attempt === 5) {\n        setGameOver({\n          gameOver: true,\n          guessedWord: false\n        });\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n\n  /** allow user to delete letter from word from specific row(attemp number)\n   * also update the wordBoard\n  */\n  const onDelete = () => {\n    if (currAttempt.letter === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({\n      ...currAttempt,\n      letter: currAttempt.letter - 1\n    });\n  };\n\n  /**this method ebing called everytime user types a word\n   * this method writes to the boardDefault array matrix\n   */\n  const onSelectLetter = key => {\n    //if letter index is greater than 4, do nothing and do not write to the matrix\n    if (currAttempt.letter > 4) return;\n\n    /** create a new board from the existing board with new value or previous values\n     * basically, create shallow copy of board\n     */\n    const newBoard = [...board];\n\n    /** add letter to a row user typing into */\n    newBoard[currAttempt.attempt][currAttempt.letter] = key;\n    setBoard(newBoard);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letter: currAttempt.letter + 1\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        score,\n        Scoreboard,\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        gameOver,\n        keyScore\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(Confetti, {\n          run: confetti,\n          numberOfPieces: \"200\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Board, {\n          score: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"me/ktfVDJIttoKh+ctjOwpIRPFU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Board","Keyboard","boardDefault","scoreBoardDefault","keyScoreValue","React","useState","createContext","useEffect","GameOver","Confetti","useMediaQuery","jsxDEV","_jsxDEV","AppContext","App","_s","board","setBoard","Scoreboard","setScoreBoard","keyScore","setKeyScore","confetti","SetConfetti","score","setScore","currAttempt","setCurrAttempt","attempt","letter","gameOver","setGameOver","guessedWord","setKeyScoreValue","currentWord","indices","newKeyScorebord","forEach","element","index","push","console","log","onEnter","alert","i","fetch","method","headers","body","JSON","stringify","guess","then","response","ok","Error","json","data","totalScore","reduce","accumulator","currentValue","is_valid_word","newScorebord","catch","error","onDelete","newBoard","onSelectLetter","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","run","numberOfPieces","_c","$RefreshReg$"],"sources":["/Users/bhargavparekh/Desktop/WordleClone/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport Board from \"./components/Board\";\nimport Keyboard from \"./components/Keyboard\";\nimport { boardDefault, scoreBoardDefault, keyScoreValue } from \"./Words\";\nimport React, { useState, createContext, useEffect } from \"react\";\nimport GameOver from \"./components/GameOver\";\nimport Confetti from 'react-confetti';\nimport { useMediaQuery } from 'react-responsive';\n\nexport const AppContext = createContext();\n\nfunction App() {\n  const [board, setBoard] = useState(boardDefault);\n  const [Scoreboard, setScoreBoard] = useState(scoreBoardDefault);\n  const [keyScore, setKeyScore] = useState(keyScoreValue);\n  const [confetti, SetConfetti] = useState(false);\n  const [score, setScore] = useState([]);\n  const [currAttempt, setCurrAttempt] = useState({ attempt: 0, letter: 0 });\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false,\n  });\n\n\n  const setKeyScoreValue = (score, currentWord) => {\n    const indices = [];\n    const newKeyScorebord = [...keyScore]\n    score.forEach((element, index) => {\n      if (element === 2) {\n        indices.push(currentWord[index] + 2);\n      }\n      else if (element === 1) {\n        indices.push(currentWord[index] + 1);\n      }\n      else {\n        indices.push(currentWord[index] + 0);\n      }\n      console.log(currAttempt.attempt)\n      newKeyScorebord[currAttempt.attempt] = indices;\n      setKeyScore(newKeyScorebord)\n});\n  }\n\n\n  const onEnter = () => {\n    if (currAttempt.letter !== 5) {\n      alert(\"Not enough letters\")\n      return;\n    }\n  \n    let currentWord = \"\";\n    for (let i = 0; i < 5; i++) {\n      currentWord += board[currAttempt.attempt][i];\n    }\n    \n    // Call the API\n    fetch('https://wordle-apis.vercel.app/api/validate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ guess: currentWord })\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Response was not ok');\n      }\n      return response.json();\n    })\n    .then(data => {\n      // Process the API response\n      // calculate total score\n      const totalScore = data.score.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n      //set array of received score to a state var\n      setScore(data.score);\n  \n      \n      /* if guessed word is valid, increment user attemp, write to scoreBoard array matrix\n         if not valid, alert the user and do nothing*/ \n      if (data.is_valid_word) {\n        setCurrAttempt({ attempt: currAttempt.attempt + 1, letter: 0 });\n        const newScorebord = [...Scoreboard]\n        newScorebord[currAttempt.attempt] = data.score;\n        setScoreBoard(newScorebord)\n        console.log(Scoreboard)\n        setKeyScoreValue(data.score, currentWord)\n      } else {\n        alert(\"Not a valid word\");\n      }\n\n      /** if user guessed correct word\n       * then it's game over with Confetti on the page\n      */\n      if (totalScore === 10) {\n        setGameOver({ gameOver: true, guessedWord: true });\n        SetConfetti(true)\n      }\n      /** if user did not guessed correct word and have used all attempts\n       * it's game over. \n      */\n      if (totalScore !== 10 && currAttempt.attempt === 5) {\n        setGameOver({ gameOver: true, guessedWord: false });\n      }\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  };\n\n\n/** allow user to delete letter from word from specific row(attemp number)\n * also update the wordBoard\n*/\n  const onDelete = () => {\n    if (currAttempt.letter === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt, letter: currAttempt.letter - 1 });\n  };\n\n\n  /**this method ebing called everytime user types a word\n   * this method writes to the boardDefault array matrix\n   */\n  const onSelectLetter = (key) => {\n    //if letter index is greater than 4, do nothing and do not write to the matrix\n    if (currAttempt.letter > 4) return;\n\n    /** create a new board from the existing board with new value or previous values\n     * basically, create shallow copy of board\n     */\n    const newBoard = [...board];\n\n    /** add letter to a row user typing into */\n    newBoard[currAttempt.attempt][currAttempt.letter] = key;\n\n    setBoard(newBoard);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letter: currAttempt.letter + 1,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <h1>Wordle</h1>\n      </nav>\n      <AppContext.Provider\n        value={{\n          score,\n          Scoreboard,\n          board,\n          setBoard,\n          currAttempt,\n          setCurrAttempt,\n          onSelectLetter,\n          onDelete,\n          onEnter,\n          gameOver,\n          keyScore\n        }}\n      >\n        <div className=\"game\">\n          <Confetti run= {confetti} numberOfPieces = \"200\" />\n          <Board score={score}/>\n          {gameOver.gameOver ? <GameOver /> : <Keyboard />}\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}