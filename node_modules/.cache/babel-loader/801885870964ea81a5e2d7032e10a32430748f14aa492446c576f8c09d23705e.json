{"ast":null,"code":"var _jsxFileName = \"/Users/bhargavparekh/Desktop/WordleClone/src/components/Letter.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from \"react\";\nimport { AppContext } from \"../App\";\n\n//component for each letter box, will be called in Board to create the Wordle Board\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Letter = ({\n  letterPos,\n  attemptVal\n}) => {\n  _s();\n  const {\n    Scoreboard,\n    board,\n    setDisabledLetters,\n    currAttempt\n  } = useContext(AppContext);\n  const letter = board[attemptVal][letterPos];\n  const scoreVal = Scoreboard[attemptVal][letterPos];\n  const correct = scoreVal === 2;\n  const almost = scoreVal === 1;\n  //this letter state wil be used to add ID to Div and than apply color style\n  // 0 --> error\n  // 1--> almost\n  // 2--> 2 correct\n  const letterState = currAttempt.attempt > attemptVal && (correct ? \"correct\" : almost ? \"almost\" : \"error\");\n\n  //call useEffect hook every time we change currAttempt.attempt\n  useEffect(() => {\n    if (letter !== \"\") {\n      //   console.log(letter);\n      setDisabledLetters(prev => [...prev, letter]);\n    }\n  }, [currAttempt.attempt]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"letter\",\n    id: letterState,\n    children: letter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Letter, \"Ktxu2GsHvrT5ceBKYB6uPfN2Xn4=\");\n_c = Letter;\nexport default Letter;\nvar _c;\n$RefreshReg$(_c, \"Letter\");","map":{"version":3,"names":["React","useContext","useEffect","AppContext","jsxDEV","_jsxDEV","Letter","letterPos","attemptVal","_s","Scoreboard","board","setDisabledLetters","currAttempt","letter","scoreVal","correct","almost","letterState","attempt","prev","className","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bhargavparekh/Desktop/WordleClone/src/components/Letter.js"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { AppContext } from \"../App\";\n\n//component for each letter box, will be called in Board to create the Wordle Board\nconst Letter = ({ letterPos, attemptVal }) => {\n  const {Scoreboard,board, setDisabledLetters, currAttempt } = useContext(AppContext);\n  const letter = board[attemptVal][letterPos];\n  const scoreVal = Scoreboard[attemptVal][letterPos];\n  const correct = scoreVal === 2;\n  const almost = scoreVal === 1;\n  //this letter state wil be used to add ID to Div and than apply color style\n  // 0 --> error\n  // 1--> almost\n  // 2--> 2 correct\n  const letterState =currAttempt.attempt > attemptVal && (correct ? \"correct\" : almost ? \"almost\" : \"error\");\n\n  //call useEffect hook every time we change currAttempt.attempt\n  useEffect(() => {\n    if (letter !== \"\") {\n    //   console.log(letter);\n      setDisabledLetters((prev) => [...prev, letter]);\n    }\n  }, [currAttempt.attempt]);\n\n  return (\n    <div className=\"letter\" id={letterState}>\n      {letter}\n    </div>\n  );\n}\n\nexport default Letter;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,SAASC,UAAU,QAAQ,QAAQ;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM;IAACC,UAAU;IAACC,KAAK;IAAEC,kBAAkB;IAAEC;EAAY,CAAC,GAAGZ,UAAU,CAACE,UAAU,CAAC;EACnF,MAAMW,MAAM,GAAGH,KAAK,CAACH,UAAU,CAAC,CAACD,SAAS,CAAC;EAC3C,MAAMQ,QAAQ,GAAGL,UAAU,CAACF,UAAU,CAAC,CAACD,SAAS,CAAC;EAClD,MAAMS,OAAO,GAAGD,QAAQ,KAAK,CAAC;EAC9B,MAAME,MAAM,GAAGF,QAAQ,KAAK,CAAC;EAC7B;EACA;EACA;EACA;EACA,MAAMG,WAAW,GAAEL,WAAW,CAACM,OAAO,GAAGX,UAAU,KAAKQ,OAAO,GAAG,SAAS,GAAGC,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC;;EAE1G;EACAf,SAAS,CAAC,MAAM;IACd,IAAIY,MAAM,KAAK,EAAE,EAAE;MACnB;MACEF,kBAAkB,CAAEQ,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEN,MAAM,CAAC,CAAC;IACjD;EACF,CAAC,EAAE,CAACD,WAAW,CAACM,OAAO,CAAC,CAAC;EAEzB,oBACEd,OAAA;IAAKgB,SAAS,EAAC,QAAQ;IAACC,EAAE,EAAEJ,WAAY;IAAAK,QAAA,EACrCT;EAAM;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAAlB,EAAA,CAzBKH,MAAM;AAAAsB,EAAA,GAANtB,MAAM;AA2BZ,eAAeA,MAAM;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}